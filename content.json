{"meta":{"title":"King Garden","subtitle":"人生短短几个秋，何不委心任去留。沧海桑田易变迁，吾永向前誓不休。","description":"","author":"Justin","url":"http://winjin.github.io","root":"/"},"pages":[{"title":"","date":"2020-03-25T11:30:53.641Z","updated":"2020-03-24T12:37:14.436Z","comments":true,"path":"README.html","permalink":"http://winjin.github.io/README.html","excerpt":"","text":"King Garden"},{"title":"categories","date":"2020-03-25T12:24:48.855Z","updated":"2020-03-25T12:24:48.855Z","comments":true,"path":"categories/index.html","permalink":"http://winjin.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-25T12:26:00.000Z","updated":"2020-03-25T12:26:00.478Z","comments":true,"path":"tags/index.html","permalink":"http://winjin.github.io/tags/index.html","excerpt":"","text":""},{"title":"Gallery","date":"2020-03-25T12:37:16.606Z","updated":"2020-03-25T12:37:16.606Z","comments":true,"path":"gallery/index.html","permalink":"http://winjin.github.io/gallery/index.html","excerpt":"","text":""}],"posts":[{"title":"InnoDB note","slug":"InnoDB-note","date":"2020-05-13T11:52:39.000Z","updated":"2020-05-13T11:58:01.301Z","comments":true,"path":"2020/05/13/InnoDB-note/","link":"","permalink":"http://winjin.github.io/2020/05/13/InnoDB-note/","excerpt":"","text":"MySQL InnoDB 引擎MySQLMySQL 需要是三个部分： 连接客户端的各种连接器，数据存储和日志，MySQL服务 InnoDBInnoDB内存结构包含四大核心组件：1 缓冲池(Buffer Pool)；2 写缓冲(Change Buffer)；3 自适应哈希索引(Adaptive Hash Index)；4 日志缓冲(Log Buffer)；","categories":[],"tags":[{"name":"MySQL, InnoDB","slug":"MySQL-InnoDB","permalink":"http://winjin.github.io/tags/MySQL-InnoDB/"}]},{"title":"session sync","slug":"session-sync","date":"2020-05-13T11:31:22.000Z","updated":"2020-05-13T11:48:54.994Z","comments":true,"path":"2020/05/13/session-sync/","link":"","permalink":"http://winjin.github.io/2020/05/13/session-sync/","excerpt":"","text":"session 为啥需要同步一定是因为有多台server。这样不能保证用户http请求每次都能正好请求到同一台服务器。所以需要把session同步到每一台server中。只是同步需要时间，有个时间差。保存许多重复的数据，有些占内存。 利用cookie保存session把session保存到cookie中，每个客服端只保存自己的。这样每次请求都在cookie中带着session，不安全。 利用NGINX反向代理服务器多台web服务器利用NGINX反向代理服务器来实现均衡的，正好在NGINX反向代理服务器中，根据用户IP让同一个用户的请求落到同一个web服务器上。只要配置好NGINX就行。 保存到数据库或者缓存中把session保存到数据库或者缓存中，在业务代码中请求每个用户的session","categories":[],"tags":[{"name":"server, session","slug":"server-session","permalink":"http://winjin.github.io/tags/server-session/"}]},{"title":"delayed message queue","slug":"delayed-message-queue","date":"2020-05-13T11:00:43.000Z","updated":"2020-05-13T11:22:51.906Z","comments":true,"path":"2020/05/13/delayed-message-queue/","link":"","permalink":"http://winjin.github.io/2020/05/13/delayed-message-queue/","excerpt":"","text":"Time round延时消息队列 （时间轮） 本质上是一个长度为3600的数组。每格1s，正好代表一小时。当然可以是其他长度。 有个重要的参数就是 圈数 cycle number 定时5个小时执行，就是5圈后的3600 各个功能模块 一个模块 循环时间轮，读取每个任务 一个模块 根据实际业务，添加任务到轮中","categories":[],"tags":[{"name":"queue","slug":"queue","permalink":"http://winjin.github.io/tags/queue/"}]},{"title":"JavaScript Note","slug":"JavaScript-Note","date":"2020-04-19T07:36:31.000Z","updated":"2020-04-19T08:51:30.013Z","comments":true,"path":"2020/04/19/JavaScript-Note/","link":"","permalink":"http://winjin.github.io/2020/04/19/JavaScript-Note/","excerpt":"","text":"JavaScriptJavaScript 简介JavaScript 是解释型脚本语言。区分大小写。在 ## JavaScript 中一切都是对象。数字(Number)、字符串(String)、数组(Array)、日期(Date)，布尔(Boolean)，算数(Math)，正则(RegExp)JavaScript 定义了 5 种原始数据类型：string，number，boolean，null，undefined JavaScript 循环 for - 循环代码块一定的次数 for/in - 循环遍历对象的属性 while - 当指定的条件为 true 时循环指定的代码块 do/while - 同样当指定的条件为 true 时循环指定的代码块 break 语句用于跳出循环。continue 用于跳过循环中的一个迭代。 JavaScript 错误12345try &#123; &#x2F;&#x2F; test code &#125; catch &#123; &#x2F;&#x2F; throw a Exception&#125; JavaScript 对象JavaScript 基于 prototype 的，而不是基于类的，绝不会存在类，也不会通过类来创建对象。 Number 对象Number 对象都是64位的。没有数字类型区分。浮点数是不精确的。NaN 是非数字值的特殊值。该属性用于指示某个值不是数字。可用 isNaN() 来判断一个值是否是 NaN 常用属性：constructor 返回对创建此对象的 Number 函数的引用。 常用方法： toString() 把数字转换为字符串，使用指定的基数。 valueOf() 返回一个 Number 对象的基本数字值。 String 对象常用属性：length 字符串的长度 常用方法： charAt() 返回在指定位置的字符。 charCodeAt() 返回在指定的位置的字符的 Unicode 编码。 concat() 连接字符串。 indexOf() 检索字符串。 lastIndexOf() 从后向前搜索字符串。 match() 找到一个或多个正则表达式的匹配。 replace() 替换与正则表达式匹配的子串。 search() 检索与正则表达式相匹配的值。 slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。 split() 把字符串分割为字符串数组。 substr() 从起始索引号提取字符串中指定数目的字符。 substring() 提取字符串中两个指定的索引号之间的字符。 toLowerCase() 把字符串转换为小写。 toUpperCase() 把字符串转换为大写。 toString() 返回字符串。 valueOf() 返回某个字符串对象的原始值。 Array 对象常用属性： constructor 返回对创建此对象的数组函数的引用。 length 设置或返回数组中元素的数目。 prototype 使您有能力向对象添加属性和方法。 常用方法： concat() 连接两个或更多的数组，并返回结果。 join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。 pop() 删除并返回数组的最后一个元素 push() 向数组的末尾添加一个或更多元素，并返回新的长度。 reverse() 颠倒数组中元素的顺序。 shift() 删除并返回数组的第一个元素 slice() 从某个已有的数组返回选定的元素 sort() 对数组的元素进行排序 splice() 删除元素，并向数组添加新元素。 toSource() 返回该对象的源代码。 toString() 把数组转换为字符串，并返回结果。 toLocaleString() 把数组转换为本地数组，并返回结果。 unshift() 向数组的开头添加一个或更多元素，并返回新的长度。 valueOf() 返回数组对象的原始值 Date 对象常用属性： constructor 返回对创建此对象的 Date 函数的引用。 prototype 使您有能力向对象添加属性和方法。 常用方法： Date() 返回当日的日期和时间。 getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。 getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。 getMonth() 从 Date 对象返回月份 (0 ~ 11)。 getFullYear() 从 Date 对象以四位数字返回年份。 getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。 getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。 getTime() 返回 1970 年 1 月 1 日至今的毫秒数。 parse() 返回1970年1月1日午夜到指定日期（字符串）的毫秒数。 setDate() 设置 Date 对象中月的某一天 (1 ~ 31)。 setMonth() 设置 Date 对象中月份 (0 ~ 11)。 setFullYear() 设置 Date 对象中的年份（四位数字）。 toString() 把 Date 对象转换为字符串。 toTimeString() 把 Date 对象的时间部分转换为字符串。 toDateString() 把 Date 对象的日期部分转换为字符串。 toLocaleString() 根据本地时间格式，把 Date 对象转换为字符串。 valueOf() 返回 Date 对象的原始值。 Boolean 对象Boolean 对象只有两个值：”true” 或 “false”。 12new Boolean(value); &#x2F;&#x2F; 当作为一个构造函数（带 new）调用时，它将把它的参数转换成一个布尔值，并返回一个包含该值的 Boolean 对象。Boolean(value); &#x2F;&#x2F; 作为函数（不带 new）调用时，Boolean() 只把它的参数转换成一个原始的布尔值，并返回这个值。 如果省略 value 参数，或者设置为 0、-0、null、””、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 “false”）。 常用属性： 常用方法：toString() 把逻辑值转换为字符串，并返回结果。valueOf() 返回 Boolean 对象的原始值。 Math 对象Math 对象没有构造函数属性。 常用属性： E 返回算术常量 e，即自然对数的底数（约等于2.718）。 LN2 返回 2 的自然对数（约等于0.693）。 LN10 返回 10 的自然对数（约等于2.302）。 LOG2E 返回以 2 为底的 e 的对数（约等于 1.414）。 LOG10E 返回以 10 为底的 e 的对数（约等于0.434）。 PI 返回圆周率（约等于3.14159）。 SQRT1_2 返回返回 2 的平方根的倒数（约等于 0.707）。 SQRT2 返回 2 的平方根（约等于 1.414）。 常用方法： abs(x) 返回数的绝对值。 acos(x) 返回数的反余弦值。 asin(x) 返回数的反正弦值。 atan(x) 以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。 atan2(y,x) 返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。 ceil(x) 对数进行上舍入。 cos(x) 返回数的余弦。 exp(x) 返回 e 的指数。 floor(x) 对数进行下舍入。 log(x) 返回数的自然对数（底为e）。 max(x,y) 返回 x 和 y 中的最高值。 min(x,y) 返回 x 和 y 中的最低值。 pow(x,y) 返回 x 的 y 次幂。 random() 返回 0 ~ 1 之间的随机数。 round(x) 把数四舍五入为最接近的整数。 sin(x) 返回数的正弦。 sqrt(x) 返回数的平方根。 tan(x) 返回角的正切。 toSource() 返回该对象的源代码。 valueOf() 返回 Math 对象的原始值。 RegExp 对象修饰符i 执行对大小写不敏感的匹配。g 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。m 执行多行匹配。 方括号范围[abc] 查找方括号之间的任何字符。[^abc] 查找任何不在方括号之间的字符。[0-9] 查找任何从 0 至 9 的数字。[a-z] 查找任何从小写 a 到小写 z 的字符。[A-Z] 查找任何从大写 A 到大写 Z 的字符。[A-z] 查找任何从大写 A 到小写 z 的字符。[adgk] 查找给定集合内的任何字符。[^adgk] 查找给定集合外的任何字符。(red|blue|green) 查找任何指定的选项。 元字符 . 查找单个字符，除了换行和行结束符。\\w 查找单词字符。\\W 查找非单词字符。\\d 查找数字。\\D 查找非数字字符。\\s 查找空白字符。\\S 查找非空白字符。\\b 匹配单词边界。\\B 匹配非单词边界。\\0 查找 NUL 字符。\\n 查找换行符。\\f 查找换页符。\\r 查找回车符。\\t 查找制表符。\\v 查找垂直制表符。\\xxx 查找以八进制数 xxx 规定的字符。\\xdd 查找以十六进制数 dd 规定的字符。\\uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符。 量词n+ 匹配任何包含至少一个 n 的字符串。n* 匹配任何包含零个或多个 n 的字符串。n? 匹配任何包含零个或一个 n 的字符串。n{X} 匹配包含 X 个 n 的序列的字符串。n{X,Y} 匹配包含 X 至 Y 个 n 的序列的字符串。n{X,} 匹配包含至少 X 个 n 的序列的字符串。n$ 匹配任何结尾为 n 的字符串。^n 匹配任何开头为 n 的字符串。?=n 匹配任何其后紧接指定字符串 n 的字符串。?!n 匹配任何其后没有紧接指定字符串 n 的字符串。 全局对象全局对象的全局属性和函数可用于所有内建的 JavaScript 对象。 全局属性Infinity 代表正的无穷大的数值。java 代表 java.* 包层级的一个 JavaPackage。NaN 指示某个值是不是数字值。Packages 根 JavaPackage 对象。undefined 指示未定义的值。 全局函数decodeURI() 解码某个编码的 URI。decodeURIComponent() 解码一个编码的 URI 组件。encodeURI() 把字符串编码为 URI。encodeURIComponent() 把字符串编码为 URI 组件。escape() 对字符串进行编码。eval() 计算 JavaScript 字符串，并把它作为脚本代码来执行。getClass() 返回一个 JavaObject 的 JavaClass。isFinite() 检查某个值是否为有穷大的数。isNaN() 检查某个值是否是数字。Number() 把对象的值转换为数字。parseFloat() 解析一个字符串并返回一个浮点数。parseInt() 解析一个字符串并返回一个整数。String() 把对象的值转换为字符串。unescape() 对由 escape() 编码的字符串进行解码。 Window 对象Window 对象属性 closed 返回窗口是否已被关闭。 defaultStatus 设置或返回窗口状态栏中的默认文本。 document 对 Document 对象的只读引用。请参阅 Document 对象。 history 对 History 对象的只读引用。请参数 History 对象。 innerheight 返回窗口的文档显示区的高度。 innerwidth 返回窗口的文档显示区的宽度。 length 设置或返回窗口中的框架数量。 location 用于窗口或框架的 Location 对象。请参阅 Location 对象。 name 设置或返回窗口的名称。 Navigator 对 Navigator 对象的只读引用。请参数 Navigator 对象。 opener 返回对创建此窗口的窗口的引用。 outerheight 返回窗口的外部高度。 outerwidth 返回窗口的外部宽度。 pageXOffset 设置或返回当前页面相对于窗口显示区左上角的 X 位置。 pageYOffset 设置或返回当前页面相对于窗口显示区左上角的 Y 位置。 parent 返回父窗口。 Screen 对 Screen 对象的只读引用。请参数 Screen 对象。 self 返回对当前窗口的引用。等价于 Window 属性。 status 设置窗口状态栏的文本。 top 返回最顶层的先辈窗口。 window window 属性等价于 self 属性，它包含了对窗口自身的引用。 screenLeft screenTop screenX screenY 只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY。 Window 对象方法 Window 对象和 Navigator 、Screen，history，Location 对象， 都是 Brower 对象。还有 DOM Document， DOM Element， DOM Attribute, DOM Event 都是 HTML DOM 对象。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://winjin.github.io/tags/JavaScript/"}]},{"title":"jQuery Note","slug":"jQuery-Note","date":"2020-04-19T06:07:53.000Z","updated":"2020-04-19T07:30:47.420Z","comments":true,"path":"2020/04/19/jQuery-Note/","link":"","permalink":"http://winjin.github.io/2020/04/19/jQuery-Note/","excerpt":"","text":"jQueryjQuery 简介jQuery 是一个 js 库。使用 script 标签引入 html 文档。使用方式： 1234567891011$(document).ready(function()&#123; &#x2F;&#x2F; jQuery methods go here...&#125;);或者$(function()&#123; &#x2F;&#x2F; jQuery methods go here...&#125;); jQuery HTML用于获取/设置 DOM 内容或属性的 jQuery 方法：text() - 设置或返回所选元素的文本内容html() - 设置或返回所选元素的内容（包括 HTML 标记）val() - 设置或返回表单字段的值attr() - 方法用于设置或获取属性值。 用于添加新内容的四个 jQuery 方法： append() - 在被选元素的结尾插入内容 prepend() - 在被选元素的开头插入内容 after() - 在被选元素之后插入内容 before() - 在被选元素之前插入内容 删除元素和内容的 jQuery 方法： remove() - 删除被选元素（及其子元素） empty() - 从被选元素中删除子元素 操作 css 的 jQuery 方法： addClass() 向被选元素添加一个或多个类 removeClass() 从被选元素删除一个或多个类 toggleClass() 对被选元素进行添加/删除类的切换操作 css() 设置或返回样式属性 处理尺寸的 jQuery 方法： width() 设置或返回元素的宽度（不包括内边距、边框或外边距） height() 设置或返回元素的高度（不包括内边距、边框或外边距） innerWidth() 返回元素的宽度（包括内边距） innerHeight() 返回元素的高度（包括内边距） outerWidth() 返回元素的宽度（包括内边距和边框） outerHeight() 返回元素的高度（包括内边距和边框） jQuery 遍历祖先的方法： parent() 返回被选元素的直接父元素。返回的是个集合，如果被选元素有多个，那么返回的集合中也有多个。 parents() 返回被选元素的所有祖先元素，它一路向上直到文档的根元素 ()。 parentsUntil() 返回介于两个给定元素之间的所有祖先元素。 jQuery 遍历后代的方法： children() 返回被选元素的所有直接子元素。 child() 返回被选元素的后代元素，一路向下直到最后一个后代。 find() jQuery 遍历同胞的方法： each() 为每个匹配元素执行函数 siblings() 返回被选元素的所有同胞元素。 prev() prevAll() prevUntil() next() nextAll() 返回被选元素的所有跟随的同胞元素。 nextUntil() 返回介于两个给定参数之间的所有跟随的同胞元素。 jQuery 遍历给定范围的方法： first() 返回被选元素的首个元素 last() eq() 返回被选元素中带有指定索引号的元素 not() 返回不匹配标准的所有元素 jQuery 选择器 选择器 实例 选取 .class,.class $(\".intro,.demo\") 选取 class 为 \"intro\" 或 \"demo\" 的所有元素 :first $(\"p:first\") 第一个 &lt;p&gt; 元素 :last $(\"p:last\") 最后一个 &lt;p&gt; 元素 :even $(\"tr:even\") 所有偶数 &lt;tr&gt; 元素 :odd $(\"tr:odd\") 所有奇数 &lt;tr&gt; 元素 :first-child $(\"p:first-child\") 属于其父元素的第一个子元素的所有 &lt;p&gt; 元素 :first-of-type $(\"p:first-of-type\") 属于其父元素的第一个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素 :last-child $(\"p:last-child\") 属于其父元素的最后一个子元素的所有 &lt;p&gt; 元素 :last-of-type $(\"p:last-of-type\") 属于其父元素的最后一个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素 :nth-child(n) $(\"p:nth-child(2)\") 属于其父元素的第二个子元素的所有 &lt;p&gt; 元素 :nth-last-child(n) $(\"p:nth-last-child(2)\") 属于其父元素的第二个子元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数 :nth-of-type(n) $(\"p:nth-of-type(2)\") 属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素 :nth-last-of-type(n) $(\"p:nth-last-of-type(2)\") 属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数 :only-child $(\"p:only-child\") 属于其父元素的唯一子元素的所有 &lt;p&gt; 元素 :only-of-type $(\"p:only-of-type\") 属于其父元素的特定类型的唯一子元素的所有 &lt;p&gt; 元素 parent &gt; child $(\"div &gt; p\") &lt;div&gt; 元素的直接子元素的所有 &lt;p&gt; 元素 parent descendant $(\"div p\") &lt;div&gt; 元素的后代的所有 &lt;p&gt; 元素 element + next $(\"div + p\") 每个 &lt;div&gt; 元素相邻的下一个 &lt;p&gt; 元素 element ~ siblings $(\"div ~ p\") &lt;div&gt; 元素同级的所有 &lt;p&gt; 元素 :eq(index) $(\"ul li:eq(3)\") 列表中的第四个元素（index 值从 0 开始） :gt(no) $(\"ul li:gt(3)\") 列举 index 大于 3 的元素 :lt(no) $(\"ul li:lt(3)\") 列举 index 小于 3 的元素 :not(selector) $(\"input:not(:empty)\") 所有不为空的输入元素 :header $(\":header\") 所有标题元素 &lt;h1&gt;, &lt;h2&gt; ... :animated $(\":animated\") 所有动画元素 :focus $(\":focus\") 当前具有焦点的元素 :contains(text) $(\":contains('Hello')\") 所有包含文本 \"Hello\" 的元素 :has(selector) $(\"div:has(p)\") 所有包含有 &lt;p&gt; 元素在其内的 &lt;div&gt; 元素 :empty $(\":empty\") 所有空元素 :parent $(\":parent\") 所有是另一个元素的父元素的元素 :hidden $(\"p:hidden\") 所有隐藏的 &lt;p&gt; 元素 :visible $(\"table:visible\") 所有可见的表格 [attribute] $(\"[href]\") 所有带有 href 属性的元素 [attribute=value] $(\"[href='default.htm']\") 所有带有 href 属性且值等于 \"default.htm\" 的元素 [attribute!=value] $(\"[href!='default.htm']\") 所有带有 href 属性且值不等于 \"default.htm\" 的元素 [attribute$=value] $(\"[href$='.jpg']\") 所有带有 href 属性且值以 \".jpg\" 结尾的元素 [attribute|=value] $(\"[title|='Tomorrow']\") 所有带有 title 属性且值等于 'Tomorrow' 或者以 'Tomorrow' 后跟连接符作为开头的字符串 [attribute^=value] $(\"[title^='Tom']\") 所有带有 title 属性且值以 \"Tom\" 开头的元素 [attribute~=value] $(\"[title~='hello']\") 所有带有 title 属性且值包含单词 \"hello\" 的元素 [attribute*=value] $(\"[title*='hello']\") 所有带有 title 属性且值包含字符串 \"hello\" 的元素 :file $(\":file\") 所有带有 type=\"file\" 的 input 元素 :enabled $(\":enabled\") 所有启用的 input 元素 :disabled $(\":disabled\") 所有禁用的 input 元素 :selected $(\":selected\") 所有选定的 input 元素 :checked $(\":checked\") 所有选中的 input 元素 jQuery 主要事件方法 bind() 向元素添加事件处理程序 blur() 添加/触发 blur 事件 change() 添加/触发 change 事件 click() 添加/触发 click 事件 dblclick() 添加/触发 double click 事件 delegate() 向匹配元素的当前或未来的子元素添加处理程序 event.stopPropagation() 阻止事件向上冒泡到 DOM 树，阻止任何父处理程序被事件通知 focus() 添加/触发 focus 事件 focusin() 添加事件处理程序到 focusin 事件 focusout() 添加事件处理程序到 focusout 事件 hover() 添加两个事件处理程序到 hover 事件 keydown() 添加/触发 keydown 事件 keypress() 添加/触发 keypress 事件 keyup() 添加/触发 keyup 事件 live() 在版本 1.9 中被移除。添加一个或多个事件处理程序到当前或未来的被选元素 on() 向元素添加事件处理程序 off() 移除通过 on() 方法添加的事件处理程序 ready() 规定当 DOM 完全加载时要执行的函数 resize() 添加/触发 resize 事件 scroll() 添加/触发 scroll 事件 select() 添加/触发 select 事件 submit() 添加/触发 submit 事件 jQuery AJAX123456789101112$.ajax(&#123; async: &#x2F;&#x2F; default true cache: &#x2F;&#x2F; default true url: dataType: data: type: beforeSend: function()&#123;&#125; success: function()&#123;&#125; error: function()&#123;&#125; complete: function()&#123;&#125;&#125;);","categories":[],"tags":[]},{"title":"HTML5","slug":"HTML5","date":"2020-04-19T04:10:32.000Z","updated":"2020-04-19T06:03:17.774Z","comments":true,"path":"2020/04/19/HTML5/","link":"","permalink":"http://winjin.github.io/2020/04/19/HTML5/","excerpt":"","text":"HTML5HTML 标签列表（功能排序）New : HTML5 新标签 标签 描述 基础 &lt;!DOCTYPE&gt; 定义文档类型。 &lt;html&gt; 定义一个 HTML 文档 &lt;title&gt; html页面的标题 &lt;body&gt; 定义文档的主体 &lt;h1&gt; to &lt;h6&gt; 定义 body 的标题 &lt;p&gt; 定义一个段落 &lt;br&gt; 换行。 &lt;hr&gt; 水平线。 &lt;!--...--&gt; 注释 格式 &lt;abbr&gt; 定义一个缩写。 &lt;address&gt; 地址信息。 &lt;b&gt; 粗体文本。 &lt;bdi&gt; New 允许设置一段文本，使其脱离其父元素的文本方向设置。 &lt;bdo&gt; 定义文本的方向。 &lt;blockquote&gt; 定义块引用。 &lt;cite&gt; 定义引用(citation)。 &lt;code&gt; 定义计算机代码文本。 &lt;del&gt; 定义被删除文本。 &lt;dfn&gt; 定义定义项目。 &lt;em&gt; 定义强调文本。 &lt;i&gt; 定义斜体文本。 &lt;ins&gt; 定义被插入文本。 &lt;kbd&gt; 定义键盘文本。 &lt;mark&gt; New 定义带有记号的文本。 &lt;meter&gt; New 仅用于定义已知最大和最小值的度量。 &lt;pre&gt; 定义预格式文本 &lt;progress&gt; New 运行中的任务进度（进程）。 &lt;q&gt; 定义短的引用。 &lt;rp&gt; New 定义不支持 ruby 元素的浏览器所显示的内容。 &lt;rt&gt; New 定义字符（中文注音或字符）的解释或发音。 &lt;ruby&gt; New 定义 ruby 注释（中文注音或字符）。 &lt;s&gt; 加删除线的文本。 &lt;samp&gt; 定义计算机代码样本。 &lt;small&gt; 小号文本。 &lt;strong&gt; 定义语气更为强烈的强调文本。 &lt;sub&gt; 定义下标文本。 &lt;sup&gt; 定义上标文本。 &lt;time&gt; New 定义一个日期/时间 &lt;u&gt; 定义下划线文本。 &lt;var&gt; 定义文本的变量部分。 &lt;wbr&gt; New 规定在文本中的何处适合添加换行符。 表单 &lt;form&gt; 定义一个 HTML 表单，用于用户输入。 &lt;input&gt; 定义一个输入控件 &lt;textarea&gt; 定义多行的文本输入控件。 &lt;button&gt; 定义按钮。 &lt;select&gt; 定义选择列表（下拉列表）。 &lt;optgroup&gt; 定义选择列表中相关选项的组合。 &lt;option&gt; 定义选择列表中的选项。 &lt;label&gt; 定义 input 元素的标注。 &lt;fieldset&gt; 定义围绕表单中元素的边框。 &lt;legend&gt; 定义 fieldset 元素的标题。 &lt;datalist&gt; New 签规定了 input 元素可能的选项列表。 &lt;keygen&gt; New 规定用于表单的密钥对生成器字段。 &lt;output&gt; New 定义一个计算的结果 框架 &lt;iframe&gt; 定义内联框架。 图像 &lt;img&gt; 定义图像。 &lt;map&gt; 定义图像映射。 &lt;area&gt; 定义图像地图内部的区域。 &lt;canvas&gt; New 通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。 &lt;figcaption&gt; New 为元素定义标题 &lt;figure&gt; New figure 标签用于对元素进行组合。 Audio/Video &lt;audio&gt; New 定义声音，比如音乐或其他音频流。 &lt;source&gt; >New 定义media元素 (&lt;video&gt; 和 &lt;audio&gt;)的媒体资源。media &lt;track&gt; New 为媒体(&lt;video&gt; 和 &lt;audio&gt;)元素定义外部文本轨道。 &lt;video&gt; New 定义一个音频或者视频 链接 &lt;a&gt; 定义一个链接 &lt;link&gt; 定义文档与外部资源的关系。 &lt;nav&gt; New 定义导航链接 列表 &lt;ul&gt; 定义一个无序列表 &lt;ol&gt; 定义一个有序列表 &lt;li&gt; 定义一个列表项 &lt;dl&gt; 定义标题类型的列表 &lt;dt&gt; 列表项 &lt;dd&gt; 列表项内容 &lt;menu&gt; 定义菜单列表。 &lt;command&gt; New 定义用户可能调用的命令（比如单选按钮、复选框或按钮）。 表格 &lt;table&gt; 定义一个表格 &lt;caption&gt; 定义表格标题。 &lt;th&gt; 定义表格中的表头单元格。 &lt;tr&gt; 定义表格中的行。 &lt;td&gt; 定义表格中的单元。 &lt;thead&gt; 定义表格中的表头内容。 &lt;tbody&gt; 定义表格中的主体内容。 &lt;tfoot&gt; 定义表格中的表注内容（脚注）。 &lt;col&gt; 定义表格中一个或多个列的属性值。 &lt;colgroup&gt; 定义表格中供格式化的列组。 元信息 &lt;head&gt; HTML 文档的头部信息 &lt;meta&gt; 定义关于 HTML 文档的元信息。 &lt;base&gt 定义页面中所有链接的默认地址或默认目标。 程序 &lt;script&gt; 定义客户端脚本。 &lt;noscript&gt; 定义针对不支持客户端脚本的用户的替代内容。 &lt;embed&gt; New 定义了一个容器，用来嵌入外部应用或者互动程序（插件）。 &lt;object&gt; 定义嵌入的对象。 &lt;param&gt; 定义对象的参数。 其他 &lt;style&gt; 定义文档的样式信息。 &lt;div&gt; 定义文档中的节。 &lt;span&gt; 定义文档中的节。 &lt;header&gt; New 定义一个文档头部部分 &lt;footer&gt; New 定义一个文档底部 &lt;section&gt; New 定义了文档的某个区域 &lt;article&gt; New 定义一个文章内容 &lt;aside&gt; New 定义其所处内容之外的内容。 &lt;details&gt; New 定义了用户可见的或者隐藏的需求的补充细节。 &lt;dialog&gt; New 定义一个对话框或者窗口 &lt;summary&gt; New 定义一个可见的标题。 当用户点击标题时会显示出详细信息。 HTML 属性New : HTML5 新属性。 属性 描述 accesskey 设置访问元素的键盘快捷键。 class 规定元素的类名（classname） contenteditable New 规定是否可编辑元素的内容。 contextmenu New 指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单 dir 设置元素中内容的文本方向。 draggable New > 指定某个元素是否可以拖动 dropzone New 指定是否将数据复制，移动，或链接，或删除 hidden New hidden 属性规定对元素进行隐藏。 id 规定元素的唯一 id lang 设置元素中内容的语言代码。 spellcheck New 检测元素是否拼写错误 style 规定元素的行内样式（inline style） tabindex 设置元素的 Tab 键控制次序。 title 规定元素的额外信息（可在工具提示中显示） translate New 指定是否一个元素的值在页面载入时是否需要翻译 HTML 事件 属性 描述 onblur 当元素失去焦点时运行脚本 onchange 当元素改变时运行脚本 oncontextmenu New 当触发上下文菜单时运行脚本 onfocus 当元素获得焦点时运行脚本 onformchange New 当表单改变时运行脚本 onforminput New 当表单获得用户输入时运行脚本 oninput New 当元素获得用户输入时运行脚本 oninvalid New 当元素无效时运行脚本 onselect 当选取元素时运行脚本 onsubmit 当提交表单时运行脚本 属性 描述 onafterprint New 在打印文档之后运行脚本 onbeforeprint New 在文档打印之前运行脚本 onbeforeonload New 在文档加载之前运行脚本 onblur 当窗口失去焦点时运行脚本 onerror New 当错误发生时运行脚本 onfocus 当窗口获得焦点时运行脚本 onhaschange New 当文档改变时运行脚本 onload 当文档加载时运行脚本 onmessage New 当触发消息时运行脚本 onoffline New 当文档离线时运行脚本 ononline New 当文档上线时运行脚本 onpagehide New 当窗口隐藏时运行脚本 onpageshow New 当窗口可见时运行脚本 onpopstate New 当窗口历史记录改变时运行脚本 onredo New 当文档执行再执行操作（redo）时运行脚本 onresize New 当调整窗口大小时运行脚本 onstorage New 当文档加载加载时运行脚本 onundo New 当 Web Storage 区域更新时（存储空间中的数据发生变化时） onunload New 当用户离开文档时运行脚本 属性 描述 onkeydown 当按下按键时运行脚本 onkeypress 当按下并松开按键时运行脚本 onkeyup 当松开按键时运行脚本 属性 描述 onclick 当单击鼠标时运行脚本 ondblclick 当双击鼠标时运行脚本 ondrag New 当拖动元素时运行脚本 ondragend New 当拖动操作结束时运行脚本 ondragenter New 当元素被拖动至有效的拖放目标时运行脚本 ondragleave New 当元素离开有效拖放目标时运行脚本 ondragover New 当元素被拖动至有效拖放目标上方时运行脚本 ondragstart New 当拖动操作开始时运行脚本 ondrop New 当被拖动元素正在被拖放时运行脚本 onmousedown 当按下鼠标按钮时运行脚本 onmousemove 当鼠标指针移动时运行脚本 onmouseout 当鼠标指针移出元素时运行脚本 onmouseover 当鼠标指针移至元素之上时运行脚本 onmouseup 当松开鼠标按钮时运行脚本 onmousewheel New 当转动鼠标滚轮时运行脚本 onscroll New 当滚动元素滚动元素的滚动条时运行脚本 …","categories":[],"tags":[]},{"title":"Bootstrap Note","slug":"Bootstrap-Note","date":"2020-04-16T11:36:03.000Z","updated":"2020-04-19T04:10:54.415Z","comments":true,"path":"2020/04/16/Bootstrap-Note/","link":"","permalink":"http://winjin.github.io/2020/04/16/Bootstrap-Note/","excerpt":"","text":"BootstrapBootstrap 简介bootsrap是基于jQuery的一款前段框架,jQuery 必须在 Bootstrap 之前引入。它需要使用HTML5的 doctype ，Bootstrap3 是以移动设备优先的。为了兼容性更好，需要加上 viewport 的 meta 标签。 12345678910111213141516171819202122bootstrap&#x2F;├── dist&#x2F;│ ├── css&#x2F;│ ├── js&#x2F;│ └── fonts&#x2F;|── docs&#x2F;| └── examples&#x2F;├── fonts&#x2F;├── less&#x2F;├── js&#x2F;│ |── alert.js│ |── button.js│ |── carouse.js│ |── collapse.js│ |── dropdown.js│ |── modal.js│ |── popover.js &#x2F;&#x2F; 弹出框│ |── scrollspy.js &#x2F;&#x2F; 滚动监听│ |── tab.js│ |── tooltip.js &#x2F;&#x2F; 模态框│ |── transition.js &#x2F;&#x2F; 过渡效果 基本模板123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt; &lt;!-- --&gt;&lt;html lang=\"zh-CN\"&gt; &lt;!-- 设置默认本地语言 --&gt; &lt;head&gt; &lt;!-- --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;!-- 兼容 IE edge 的 --&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;!-- width 属性控制设备的宽度 --&gt; &lt;!-- &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt; --&gt; &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt; &lt;title&gt;Bootstrap 101 Template&lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt; &lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js\"&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;你好，世界！&lt;/h1&gt; &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js\"&gt;&lt;/script&gt; &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 全局样式1234567body &#123; font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.428571429; color: #333333; background-color: #ffffff;&#125; 并且使用 Normalize.css 来初始化一些元素，保证不同浏览器的一致性。 容器主要有两个 class ：container 和 container-fluid。 容器不能相互嵌套。 123456.container &#123; padding-right: 15px; padding-left: 15px; margin-right: auto; margin-left: auto;&#125; 栅格系统 row必须放到container内。 用row创建col列。 内容应该放置在列内，且唯有列可以是行的直接子元素。 列通过内边距（padding）来创建列内容之间的间隙。该内边距是通过 .rows 上的外边距（margin）取负，表示第一列和最后一列的行偏移。 网格系统是通过指定您想要横跨的十二个可用的列来创建的。例如，要创建三个相等的列，则使用三个 .col-xs-4。 12345678&lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-*-*\"&gt;&lt;/div&gt; &lt;div class=\"col-*-*\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"row\"&gt;...&lt;/div&gt;&lt;/div&gt;&lt;div class=\"container\"&gt;.... 偏移列大屏幕使用 .col-md-offset-* 这些类实现偏移。这些类会把一个列的左外边距（margin）增加 * 列，其中 * 范围是从 1 到 11。 嵌套列要嵌套列，必须先在列里面写row，然后在行里面写列。 列排序通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。 排版标题 &lt;h1&gt; &lt;h6&gt; 标题和 副标题 &lt;mark&gt; 用来显示高亮内容 &lt;del&gt; &lt;s&gt; 带删除线的文本 &lt;ins&gt; &lt;u&gt; 带下划线的文本 &lt;blockquote&gt; 引用文本 用于对齐方式的类： text-left text-center text-right text-justify text-nowrap 用于改变文本大小： text-lowercase text-uppercase text-capitalize 列表 作用在 ul ol 上的 list-unstyled 类用来移除着重号， list-inline 类用来把所有li放到一行内 作用在 dl 上的 dl-horizontal 类可以使 dt 和 dd 显示到一行内 text-overflow 属性可以截断列表中太长的内容 代码 &lt;kbd&gt; 标记用户通过键盘输入的内容。 &lt;code&gt; 内联显示代码 &lt;pre&gt; 块状显示代码 当使用 &lt;pre&gt; 和 &lt;code&gt; 标签时，开始和结束标签应该使用 unicode 变体： &amp;lt; 和 &amp;gt;。 .pre-scrollable 类 使 &lt;pre&gt; 元素可滚动 &lt;var&gt; 标签标记变量 &lt;samp&gt; 标签来标记程序输出的内容 表格123456789101112131415161718192021&lt;div class=\"table-responsive\"&gt; &lt;!-- 使表格变为响应式，在小屏幕可以滚动 --&gt; &lt;table class=\"table\"&gt; &lt;caption&gt;基本的表格布局&lt;/caption&gt; &lt;!-- 表格头 --&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;名称&lt;/th&gt; &lt;!-- 标题 --&gt; &lt;th&gt;城市&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Tanmay&lt;/td&gt; &lt;!-- 表格列内容 --&gt; &lt;td&gt;Bangalore&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Sachin&lt;/td&gt; &lt;td&gt;Mumbai&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; 用在table上的类： .table基本表格 .table-striped条纹表格 .table-bordered有边框的表格 .table-hover tbody 有悬停阴影的表格 .table-condensed padding 紧凑的表格 用在tr 和 td上的类： .active .success .info .warning .danger 表单表单布局： 垂直表单（默认） 把标签和控件放在一个带有类 .form-group 的 &lt;div&gt; 中。这样可以获取最佳间距。 向所有的文本元素 &lt;input&gt;、&lt;textarea&gt; 和 &lt;select&gt; 添加类 .form-control。 默认情况下，Bootstrap 中的 input、select 和 textarea 有 100% 宽度。在使用内联表单时，您需要在表单控件上设置一个宽度。 可以通过为 label 设置 .sr-only 类将其隐藏。 内联表单 向 form 标签添加类 .form-inline 可以通过为 label 设置 .sr-only 类将其隐藏。 可以手动设置 wdith 一定要添加 label 标签 水平表单 向父 form 元素添加类 .form-horizontal。 把标签和控件放在一个带有类 .form-group 的 中。 向标签对应的 label 添加类 .control-label。 .form-group 类和 .col-- 这样的栅格类结合使用，从而使 label 和表单水平显示。 必须添加 type 属性声明 如果需要在表单中将一行纯文本和 label 元素放置于同一行，为 元素添加 .form-control-static 类即可。 要在文本输入框 &lt;input&gt; 前面、后面或是两边加上文字或按钮等，可以为 输入框组 input-group 赋予 .input-group-addon 或 .input-group-btn 类，就可以给 .form-control 的前面或后面添加额外的元素了。 复选框（CheckBoxe）和单选框（Radio）12345678910111213&lt;div class=\"checkbox disabled\"&gt; &lt;label&gt; &lt;input type=\"checkbox\" value=\"\" disabled&gt; Option two is disabled &lt;/label&gt;&lt;/div&gt;&lt;div class=\"radio disabled\"&gt; &lt;label&gt; &lt;input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios\" value=\"option\" disabled&gt; Option three is disabled &lt;/label&gt;&lt;/div&gt; 对一系列复选框和单选框使用 .checkbox-inline 或 .radio-inline class，控制它们显示在同一行上。 123456&lt;label class&#x3D;&quot;checkbox-inline&quot;&gt; &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;inlineCheckbox1&quot; value&#x3D;&quot;option1&quot;&gt; 1&lt;&#x2F;label&gt;&lt;label class&#x3D;&quot;radio-inline&quot;&gt; &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;inlineRadioOptions&quot; id&#x3D;&quot;inlineRadio1&quot; value&#x3D;&quot;option1&quot;&gt; 1&lt;&#x2F;label&gt; 下拉列表（select） select 标签也使用 .form-control 类。可多选需要设置 multiple 属性。 只需要对父元素简单地添加适当的 class（.has-warning、 .has-error 或 .has-success）即可显示对应的验证样式。 .has-feedback 类 对应的反馈图标（feedback icon）只能使用在文本输入框 &lt;input class=&quot;form-control&quot;&gt; 元素上。 控件的尺寸通过 .input-lg 类似的类设置高度，通过 .col-lg-* 类似的类设置宽度。 按钮&lt;a&gt;、&lt;button&gt; 或 &lt;input&gt; 元素添加按钮类，都可以作为 button 使用。使用 .btn-lg、.btn-sm 或 .btn-xs 来改变按钮的尺寸。使用 .active、.disabled 为 a 标签类型的按钮改变状态，使用 disabled、 opacity 属性给 button 标签改变状态 1234567891011121314151617181920&lt;!-- Standard button --&gt;&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;（默认样式）Default&lt;&#x2F;button&gt;&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;（首选项）Primary&lt;&#x2F;button&gt;&lt;!-- Indicates a successful or positive action --&gt;&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-success&quot;&gt;（成功）Success&lt;&#x2F;button&gt;&lt;!-- Contextual button for informational alert messages --&gt;&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-info&quot;&gt;（一般信息）Info&lt;&#x2F;button&gt;&lt;!-- Indicates caution should be taken with this action --&gt;&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-warning&quot;&gt;（警告）Warning&lt;&#x2F;button&gt;&lt;!-- Indicates a dangerous or potentially negative action --&gt;&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger&quot;&gt;（危险）Danger&lt;&#x2F;button&gt;&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-link&quot;&gt;（链接）Link&lt;&#x2F;button&gt; 图片为图片添加 .img-responsive 类可以让图片支持响应式布局。让使用了 .img-responsive 类的图片水平居中，使用 .center-block 类。img 标签有三个类可以改变图片形状： - .img-rounded：添加 border-radius:6px 来获得图像圆角。 - .img-circle：添加 border-radius:500px 来让整个图像变成圆形。 - .img-thumbnail：添加一些内边距（padding）和一个灰色的边框。 组件Glyphicons 字体图标字形图标（Glyphicons）是在 Web 项目中使用的图标字体。&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt; glyphicon-user 就是要使用的具体图标的名字 12345678910111213141516171819@font-face &#123; font-family: &#39;Glyphicons Halflings&#39;; src: url(&#39;..&#x2F;fonts&#x2F;glyphicons-halflings-regular.eot&#39;); &#x2F;* 图标字体的位置 *&#x2F; src: url(&#39;..&#x2F;fonts&#x2F;glyphicons-halflings-regular.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;), url(&#39;..&#x2F;fonts&#x2F;glyphicons-halflings-regular.woff&#39;) format(&#39;woff&#39;), url(&#39;..&#x2F;fonts&#x2F;glyphicons-halflings-regular.ttf&#39;) format(&#39;truetype&#39;), url(&#39;..&#x2F;fonts&#x2F;glyphicons-halflings-regular.svg#glyphicons_halflingsregular&#39;) format(&#39;svg&#39;);&#125; .glyphicon &#123; position: relative; top: 1px; display: inline-block; font-family: &#39;Glyphicons Halflings&#39;; -webkit-font-smoothing: antialiased; font-style: normal; font-weight: normal; line-height: 1; -moz-osx-font-smoothing: grayscale;&#125;...... 下拉菜单 Dropdown12345678910111213141516&lt;div class&#x3D;&quot;dropdown&quot;&gt; &#x2F;* fropdown 向下弹出菜单， dropup 向上弹出菜单 *&#x2F; &lt;button class&#x3D;&quot;btn btn-default dropdown-toggle&quot; type&#x3D;&quot;button&quot; id&#x3D;&quot;dropdownMenu1&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;true&quot;&gt; Dropdown &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;button&gt; &lt;ul class&#x3D;&quot;dropdown-menu&quot; aria-labelledby&#x3D;&quot;dropdownMenu1&quot;&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li class&#x3D;&quot;dropdown-header&quot;&gt;Dropdown header&lt;&#x2F;li&gt; &#x2F;* 标题分组 *&#x2F; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt; &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt; &#x2F;* 分割线 *&#x2F; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Disabled link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &#x2F;* 禁用的菜单项 *&#x2F; &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt; 按钮组 .btn-group 用于形成基本的按钮组。在 .btn-group 中放置一系列带有.btn 的按钮。 按钮工具栏就是把一组 放进一个 中。 给 .btn-group 加上 .btn-group-* 类，可以修改按钮组尺寸。 把 .btn-group 放入另一个 .btn-group 中，可以把列表嵌套到后一个 .btn-group。 btn-group-vertical 类可以让按钮组垂直排序。 按钮式下拉菜单在一个 .btn-group 中放置按钮和下拉菜单即可 1234567891011121314&lt;div class&#x3D;&quot;btn-group&quot;&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger&quot;&gt;Action&lt;&#x2F;button&gt; &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt; &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;sr-only&quot;&gt;Toggle Dropdown&lt;&#x2F;span&gt; &lt;&#x2F;button&gt; &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt; 输入框组向 .form-control 类的 input 文本输入框的前或后添加前缀后缀的步骤如下： 把有 .form-control 类的 input 标签放到类 .input-group 的 中。 在此 input 的前或者后放一个 span 标签，为此 span 加 .input-group-addon 类。 在 span 内写上要加的前后缀。 导航导航组件都依赖同一个 .nav 类，状态类也是共用的。在标签页上使用导航需要依赖 JavaScript 标签页插件 1234567891011121314&lt;ul class&#x3D;&quot;nav nav-tabs nav-justified&quot;&gt; &lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;SVN&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;iOS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;VB.Net&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Java&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;PHP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;ul class&#x3D;&quot;nav nav-pills nav-justified&quot;&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;iOS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;VB.Net&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; ... &lt;li role&#x3D;&quot;presentation&quot; class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Disabled link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt; 分页标签徽章给链接、导航等元素嵌套 元素，可以很醒目的展示新的或未读的信息条目。 巨幕12345&lt;div class&#x3D;&quot;jumbotron&quot;&gt; &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt; &lt;p&gt;...&lt;&#x2F;p&gt; &lt;p&gt;&lt;a class&#x3D;&quot;btn btn-primary btn-lg&quot; href&#x3D;&quot;#&quot; role&#x3D;&quot;button&quot;&gt;Learn more&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt; 警告框使用 .alert 类， alert-success alert-info alert-warning alert-danger .alert-dismissible 使警告框可关闭。 用 .alert-link 工具类，可以为链接设置与当前警告框相符的颜色。 进度条创建一个进度条： 添加一个 .progress 的 。在此 内，添加一个带有 .progress-bar 的 。给此 div 添加一个 style 属性，例如 style=”60%”; 表示进度条在 60% 的位置。 123456&lt;div class&#x3D;&quot;progress&quot;&gt; &lt;div class&#x3D;&quot;progress-bar&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 60%;&quot;&gt; &lt;span class&#x3D;&quot;sr-only&quot;&gt;60% Complete&lt;&#x2F;span&gt; &lt;!-- 隐藏进度数字 --&gt; 60% Complete &lt;!-- 显示进度数字 --&gt; &lt;&#x2F;div&gt;&lt;&#x2F;div&gt; progress-bar-success progress-bar-info … 改变进度条颜色progress-bar-striped 进度条带条纹， progress-bar-striped active 带动画效果 面版123456789&lt;div class&#x3D;&quot;panel panel-default&quot;&gt; &lt;!-- 必须的 --&gt; &lt;div class&#x3D;&quot;panel-heading&quot;&gt; &lt;h3 class&#x3D;&quot;panel-title&quot;&gt;Panel title&lt;&#x2F;h3&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;panel-body&quot;&gt; &lt;!-- 必须的 --&gt; Panel content &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;panel-footer&quot;&gt;Panel footer&lt;&#x2F;div&gt;&lt;&#x2F;div&gt; JavaScript 插件bootstrap/js/ 的插件可以单独引入，也可以一次全部引入(即引入bootstrap.min.js) 12$(document).off(&#39;.data-api&#39;) &#x2F;&#x2F; 通过关闭data属性的API禁用所有 bootstrap 插件$(document).off(&#39;.alert.data-api&#39;) &#x2F;&#x2F; 通过关闭data属性的API禁用 alert bootstrap 插件 具体内容查看 https://v3.bootcss.com/javascript/","categories":[],"tags":[]},{"title":"vue note","slug":"vue-note","date":"2020-04-08T07:31:20.000Z","updated":"2020-04-09T12:11:57.885Z","comments":true,"path":"2020/04/08/vue-note/","link":"","permalink":"http://winjin.github.io/2020/04/08/vue-note/","excerpt":"","text":"Vue安装 直接下载并使用&lt;script&gt;标签引入，Vue会被注册为一个全局变量。 或者使用npm安装，执行npm install vue 安装最新稳定版。 简介Vue的是个渐进式的前端框架。页面上的数据和DOM是响应式的，也即双向绑定的。学习Vue，不要想jQuery，要回来学习JavaScript。 Vue 实例一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成。 1234var vm &#x3D; new Vue(&#123; &#x2F;&#x2F; 选项属性 ... &#125;) vm 是 ViewModel 的缩写，常用来表示 Vue 实例， 这个实例也叫选项对象。 模板语法","categories":[],"tags":[]},{"title":"favicon note","slug":"favicon-note","date":"2020-03-27T11:49:02.000Z","updated":"2020-03-27T11:58:23.101Z","comments":true,"path":"2020/03/27/favicon-note/","link":"","permalink":"http://winjin.github.io/2020/03/27/favicon-note/","excerpt":"","text":"favicon 是 favorite icon 的缩写。也就是出现在浏览器书签中网站名左边的那个小图标。有的还会出现在地址栏 URL 的左边。 一般都会被命名为 favicon.ico 以下是一些常见的用法： 123&lt;link rel=\"shortcut icon\" href=\"/src/iamges/favicon.ico&gt;&lt;link rel=\"icon\" href=\"/src/iamges/favicon.png&gt;","categories":[],"tags":[]},{"title":"Hexo note","slug":"Hexo-note","date":"2020-03-23T11:36:03.000Z","updated":"2020-03-25T11:37:31.751Z","comments":true,"path":"2020/03/23/Hexo-note/","link":"","permalink":"http://winjin.github.io/2020/03/23/Hexo-note/","excerpt":"","text":"HexoHexo 建站Hexo是一个博客框架，默认使用Markdown作为引擎解析文章，生成静态 html 文件。安装 hexo 之前需要安装有 Node.js 和 Git。 12$ npm install -g hexo-cli &#x2F;&#x2F; 全局安装 hexo$ npm install hexo &#x2F;&#x2F; 局部安装 hexo 1$ hexo version &#x2F;&#x2F; 显示 hexo 版本信息 使用 hexo 命令建站 123$ hexo init &lt;folder&gt; &#x2F;&#x2F; 这个 folder 就是站点的开始的文件夹$ cd &lt;folder&gt;$ npm install 之后你可以看到一些目录和文件,主要有： 12345678910├── scaffolds├── source| └── _posts| └── images├── public| └── _posts| └── images├── themes├── _config.yml├── package.json source\\_posts\\ 这个目录下就是你新建的 MD 文件的存放目录。_config.yml是配置文件，里面有关于此站点的所有设置。 常用命令使用 hexo init就可以在当前的目录新建一个站点了，及时不设置_config.yml文件，也是可以开始写文章的。默认有个 hello world 的模板。可以直接建.md文件或者使用命令 123$ hexo new [layout] &lt;title&gt; &#x2F;&#x2F; 默认式 post 布局$ hexo new &quot;About me&quot;$ hexo new &quot;Markdown List&quot; 如果使用了其他布局，之后需要用hexo publish [layout] &lt;title&gt;命令，把文章发布到 post 布局 本地调试1$ hexo server 部署到 github打开_config.yml文件，在 deploy 部分做配置： 123type: gitrepository: https:&#x2F;&#x2F;github.com&#x2F;winjin&#x2F;winjin.github.iobranch: master 然后执行命令：npm install hexo-deployer-git --save再执行命令：hexo deploy由于没有使用 SSH 所以上条命令执行过程中需要输入你 github 的用户名和密码，然后 github pages 就可以用了。 到目前为止，虽然，主题没有设置，一些配置没有更改，但是基本可以使用了。以后写文章到部署到线上，大致会是这样一个过程： 123456hexo new &quot;article name&quot; &#x2F;&#x2F; 新建一个 .md 文件使用编辑器打开 article-name.md 写你的文章hexo server &#x2F;&#x2F; 开启本地服务，查看调试效果hexo clean &#x2F;&#x2F; 会把 public 目录清空hexo generate &#x2F;&#x2F; 生成静态文件hexo deploy &#x2F;&#x2F; 部署到 github 又需要输入 username 和 password，除非使用你 SSH","categories":[],"tags":[]},{"title":"Markdown List","slug":"Markdown-List","date":"2020-03-20T10:58:53.000Z","updated":"2020-03-25T11:01:41.719Z","comments":true,"path":"2020/03/20/Markdown-List/","link":"","permalink":"http://winjin.github.io/2020/03/20/Markdown-List/","excerpt":"","text":"基本语法字体 正常字体 斜体 斜体 加粗 删除线 12345无*斜体* _斜体_**加粗** ***斜体加粗***~~删除线~~ 标题一级标题二级标题三级标题四级标题五级标题六级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 邮件&#97;&#x75;&#116;&#111;&#109;&#97;&#116;&#105;&#99;&#119;&#106;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#109; 无、有序列表无序列表 此字左边的-和几个空格 此字左边的+和几个空格 此字左边的*和几个空格 123- 此字左边的-和几个空格+ 此字左边的+和几个空格* 此字左边的*和几个空格 有序列表 1.此字左边的1和.3. 此字左边的2和.5. 此字左边的3和点 1231.此字左边的1和.3. 此字左边的2和.5. 此字左边的3和点 列表嵌套 上一级和下一级之间输入三个空格 一级A 二级A 二级B 二级C 三级A 三级B 三级C 一级B 一级C 还是二级A 还是二级C 1234567891011+ 一级A 1. 二级A 8. 二级B 3. 二级C - 三级A - 三级B * 三级C- 一级B- 一级C + 还是二级A - 还是二级C 引用 Markdown 使用 &gt; 来表示引用。把&gt;放到每一行的开始，加个空格即可。也可以只在一整段文件的第一行开始加&gt;,其他行省略。输入两个&gt; &gt;表示嵌套的二级引用。引用的区块内也可以使用其他的 Markdown 语法。 123&gt; Markdown 使用 &gt; 来表示引用。把&#96;&gt;&#96;放到每一行的开始，加个空格即可。&gt; 也可以只在一整段文件的第一行开始加&#96;&gt;&#96;,其他行省略。&gt; 输入两个&#96;&gt; &gt; &#96;表示嵌套的二级引用。引用的区块内也可以使用其他的 Markdown 语法。 代码块Markdown 使用 &lt;pre&gt; 和 &lt;code&gt; 标签来包裹代码块 分割线一行 * 号 一行有空格的 * 号 一行有空格的 - 号 一行 _ 号 1234****** * * *- - - - 英文减号______ 英文下划线 图片 链接 邮件图片行内式 图片参考式![Unsplash][1][1]: images/Unsplash_mdxx12.jpg “Bird” 1234567891011121314&#96;图片&#96;行内式![图片alt](图片地址 &quot;图片title&quot;)图片alt是图片的说明文字图片title是当鼠标移动到图片上面显示的文字。可省略。![Unsplash](&#x2F;images&#x2F;Unsplash_mdxx12.jpg &quot;Bird&quot;)&#96;图片&#96;参考式[图片alt][id][id]: url &quot;title&quot;![Unsplash][1][1]: images&#x2F;Unsplash_mdxx12.jpg &quot;Bird&quot; 链接行内式Github 链接参考式[Github][2][2]: https://github.com/winjin github winjin 12345678&#96;链接&#96;行内式[Github](https:&#x2F;&#x2F;github.com&#x2F;winjin &quot;github link&quot;)&#96;链接&#96;参考式[Github][2][2]: https:&#x2F;&#x2F;github.com&#x2F;winjin或者&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;winjin&quot; target&#x3D;&quot;_blank&quot;&gt;github winjin&lt;&#x2F;a&gt; 转义在一下符号前加 \\ 可以转移一下符号 123456789101112\\ 反斜线&#96; 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 表格 th th th td td td td td td 1234th | th | th ---|:--|---:td | td | tdtd | td | td -: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。 一个 反引号 可以标记一小段行内代码三个 反引号 可以标记一段代码块","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://winjin.github.io/tags/Markdown/"}]},{"title":"About Me","slug":"About-Me","date":"2020-03-20T10:43:57.000Z","updated":"2020-03-27T12:13:48.004Z","comments":true,"path":"2020/03/20/About-Me/","link":"","permalink":"http://winjin.github.io/2020/03/20/About-Me/","excerpt":"","text":"基本信息 姓名 wenjin 性别 男 现居 北京 专业 自动化 电话 15311486532 邮箱 automaticwj@163.com 技能能力 熟练使用 php，html，css，javascript开发 Web 应用 熟练使用 Jquery，Bootstrap 简单了解 Vue，npm 熟练使用MySQL数据库，以及常见配置和优化 工作经历 2018-03 ~ 至今 瑞友科技股份有限公司 PHP研发工程师 2017-03 ~ 2018-03 名远众筹(北京)资产管理有限公司 PHP开发工程师 2015-03 ~ 2017-03 锐达信创科技有限公司 PHP工程师 沟通执行工作中能够虚心听取同事意见，并能够耐心与同事交流，对工作中与同事的交集部分，能够有效跟进。对于领导安排的任务，有问题会及时提出自己的想法，最终能够坚持贯彻执行任务。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-20T10:23:06.587Z","updated":"2020-03-23T11:34:27.901Z","comments":true,"path":"2020/03/20/hello-world/","link":"","permalink":"http://winjin.github.io/2020/03/20/hello-world/","excerpt":"","text":"你好，世界！很荣幸有机会来到这个星球。我很珍惜！很感恩！","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"MySQL, InnoDB","slug":"MySQL-InnoDB","permalink":"http://winjin.github.io/tags/MySQL-InnoDB/"},{"name":"server, session","slug":"server-session","permalink":"http://winjin.github.io/tags/server-session/"},{"name":"queue","slug":"queue","permalink":"http://winjin.github.io/tags/queue/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://winjin.github.io/tags/JavaScript/"},{"name":"Markdown","slug":"Markdown","permalink":"http://winjin.github.io/tags/Markdown/"}]}